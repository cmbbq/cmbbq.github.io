<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>se on Cmbbq&#39;s Encyclopedia</title>
    <link>https://cmbbq.github.io/tags/se/</link>
    <description>Recent content in se on Cmbbq&#39;s Encyclopedia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cmbbq.github.io/tags/se/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Error Handling</title>
      <link>https://cmbbq.github.io/posts/error-handling/</link>
      <pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://cmbbq.github.io/posts/error-handling/</guid>
      <description>本文讨论现代C++的错误处理问题，结论如下：
宜用Result Monad取代C范式和C++异常，在接口层面清晰定义表明可出错性，和错误清单。 每个模块应有独立的Error类型，不宜用全局统一的Error类型或其subtype/variant，规避过于丝滑的错误传播导致的舒适陷阱。 上述模块级的Error类型一般就是一个enum class，足够紧凑、安全。必需在Error中留存状态的场景再用std::variant+std::visit。 明确需特殊处理的错误宜独占一个类型，不宜和常规错误一起并列在模块级Error的enum class中。 Exception Sucks in Every Possible Way C++的异常具有多个令人绝望的特质：
违反C++的基本设计准则——zero cost abstraction。 鼓励隐藏control flow。 不鼓励在接口中给出错误定义。 对异常类型没有任何约束。 不提供有界的空间时间开销承诺。backtrace耗时多久完全不可预计。 导致编译后的代码膨胀。 不兼容C ABI。 throw需要动态内存分配，catch甚至需要RTTI。嵌入式环境下不会这么奢侈。 总之C++异常机制是一种自然演化而成的历史遗迹，而非合乎理性的程序语言设计。以今天的标准，连写成提案的机会都不会有就会在mailing list被C++语言律师冷嘲热讽而消失。
哪怕现在有很多轻量化甚至零成本抽象的新型exception提案（比如P1095R01和P0709R42），一时半会儿也不会有改观，固有的exception已经根植于历史系统中，包含标准库在内的庞大基础库都难以承受范式迁移的代价。合理对待异常的态度就是弃之不用。
Convey Fallibility in API C风格error code虽然简单，但需要使用者有强大的自控能力，对于现代编程来说还是太过危险、简陋，语言层面本身无法区分参数中哪个是输入，哪个是输出，仰赖约定俗成的命名习惯或注释，缺乏可读性，编程时的心智负担太重。错误传播则缺乏类型安全，往往直接传引用和指针，引发难以追踪的内存安全、线程安全问题。不做任何错误传播，就地解决错误的话，又会导致代码繁琐冗余，总有一天会懒得做错误处理。
如何兼具安全的错误传播、零成本抽象、接口中传达清晰的错误清单？Golang也没做到（几乎和C一样简陋，给了官方的error类型，然而并非泛型或Monad，只是一个返回Error()字符串的接口）。Java有点作弊（封闭且完整的JVM+标准库+Javadoc注释生态圈）。Rust则轻装简行，为我们展示了Result&amp;lt;T,E&amp;gt;的巨大成功——后续我们将其称为Result范式，用函数式编程语境下的Result Monad指代这类结构。
抛开性能、C-兼容性等问题不谈，纯粹从软件系统设计的角度讲，Result Monad也能更好地在API层面清晰无误地将可能出现的错误良好定义。而exception则散落在代码实现中，单看接口根本不知道throw了什么，隐藏了哪些坑，如何处理这些坑——这在软件互操作性上是灾难性的。
如今Rust-like Result范式的std::expected已经进入标准库，自gcc12/clang16起已经可以使用了，受限于旧版编译器的场景则可以用第三方实现。
Keep Local Errors in Their Own Types 基于Result&amp;lt;T,E&amp;gt;或expected&amp;lt;T,E&amp;gt;进行错误处理时，有一个简单方便的做法是将E设置成一个巨大的全局enum，包含所有可能的error code。这样就可以在整个程序中自由地用?操作符或and_then/or_else传播error，达到类似throw+catch异常的效果。
这么做的确可以降低编程时的心智负担，但同时也注入了滥用错误传播的风险——当编码者可以轻易甩锅时，往往就会甩锅。通常一个独立且内聚的模块会对自身内部细节有更多了解，有些问题还是就地处理更妥当，把失败的细节暴露给相对外行的调用者，是在鼓励制造不恰当的耦合。
因此每个系统模块对外应暴露最小化的错误集，将内部可处理的错误在内部消化，并将所有fatal error就地解决——往往是打日志、做些修复（有状态系统）、退出程序。为了避免滥用错误传播，对外暴露的这个错误集还应该有自己的enum类型（C++语境下一般就是enum class，如有必要，可尝试用std::variant+std::visit模拟Rust的Enums + pattern matching，见3），而不宜采用全局统一的某种enum的subtype或variant——迫使直接调用者优先对错误进行处理而不是甩锅给间接调用者，在甩锅非常合理的场景下，必要的显式类型转换或transform_error/map_error，也让甩锅成为一个有意识的system2编程决策，而非system1本能行为。
此外，有一些特殊错误的处理逻辑与众不同，不宜和其他错误共享一个enum class，而应赋予这单个error一个独占的类型。这种情况下，可以用嵌套的expected表示返回值类型，如expectd&amp;lt;expected&amp;lt;T, SpecialError&amp;gt;, Error&amp;gt;，迫使调用者对SpecialError做单独处理。一个典型的例子是sled4中compare_and_swap，返回类型特地包裹了两层，外层是sled::Error，内层是特殊的CompareAndSwapError（CAS失败并非异常，而是常态，对它的处理应视为控制流，而非异常处理），在做这种设计后，sled用户误用这个函数的几率就大大降低了，第一次用?操作符仅将外层的通用Error传播了出去，不至于把必需特殊处理的CAS error也一并甩出去。
fn compare_and_swap( &amp;amp;mut self, key: Key, old_value: Value, new_value: Value ) -&amp;gt; Result&amp;lt;Result&amp;lt;(), CompareAndSwapError&amp;gt;, sled::Error&amp;gt; // we can actually use try `?</description>
      <content>&lt;p&gt;本文讨论现代C++的错误处理问题，结论如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;宜用&lt;code&gt;Result Monad&lt;/code&gt;取代C范式和C++异常，在接口层面清晰定义表明可出错性，和错误清单。&lt;/li&gt;
&lt;li&gt;每个模块应有独立的Error类型，不宜用全局统一的Error类型或其subtype/variant，规避过于丝滑的错误传播导致的舒适陷阱。&lt;/li&gt;
&lt;li&gt;上述模块级的Error类型一般就是一个&lt;code&gt;enum class&lt;/code&gt;，足够紧凑、安全。必需在Error中留存状态的场景再用&lt;code&gt;std::variant&lt;/code&gt;+&lt;code&gt;std::visit&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;明确需特殊处理的错误宜独占一个类型，不宜和常规错误一起并列在模块级Error的enum class中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;exception-sucks-in-every-possible-way&#34;&gt;Exception Sucks in Every Possible Way&lt;/h1&gt;
&lt;p&gt;C++的异常具有多个令人绝望的特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;违反C++的基本设计准则——&lt;code&gt;zero cost abstraction&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;鼓励隐藏&lt;code&gt;control flow&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;不鼓励在接口中给出错误定义。&lt;/li&gt;
&lt;li&gt;对异常类型没有任何约束。&lt;/li&gt;
&lt;li&gt;不提供有界的空间时间开销承诺。&lt;code&gt;backtrace&lt;/code&gt;耗时多久完全不可预计。&lt;/li&gt;
&lt;li&gt;导致编译后的代码膨胀。&lt;/li&gt;
&lt;li&gt;不兼容&lt;code&gt;C ABI&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throw&lt;/code&gt;需要动态内存分配，&lt;code&gt;catch&lt;/code&gt;甚至需要&lt;code&gt;RTTI&lt;/code&gt;。嵌入式环境下不会这么奢侈。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之C++异常机制是一种自然演化而成的历史遗迹，而非合乎理性的程序语言设计。以今天的标准，连写成提案的机会都不会有就会在mailing list被C++语言律师冷嘲热讽而消失。&lt;/p&gt;
&lt;p&gt;哪怕现在有很多轻量化甚至零成本抽象的新型exception提案（比如P1095R0&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;和P0709R4&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;），一时半会儿也不会有改观，固有的exception已经根植于历史系统中，包含标准库在内的庞大基础库都难以承受范式迁移的代价。合理对待异常的态度就是弃之不用。&lt;/p&gt;
&lt;h1 id=&#34;convey-fallibility-in-api&#34;&gt;Convey Fallibility in API&lt;/h1&gt;
&lt;p&gt;C风格error code虽然简单，但需要使用者有强大的自控能力，对于现代编程来说还是太过危险、简陋，语言层面本身无法区分参数中哪个是输入，哪个是输出，仰赖约定俗成的命名习惯或注释，缺乏可读性，编程时的心智负担太重。错误传播则缺乏类型安全，往往直接传引用和指针，引发难以追踪的内存安全、线程安全问题。不做任何错误传播，就地解决错误的话，又会导致代码繁琐冗余，总有一天会懒得做错误处理。&lt;/p&gt;
&lt;p&gt;如何兼具安全的错误传播、零成本抽象、接口中传达清晰的错误清单？Golang也没做到（几乎和C一样简陋，给了官方的error类型，然而并非泛型或Monad，只是一个返回Error()字符串的接口）。Java有点作弊（封闭且完整的JVM+标准库+Javadoc注释生态圈）。Rust则轻装简行，为我们展示了&lt;code&gt;Result&amp;lt;T,E&amp;gt;&lt;/code&gt;的巨大成功——后续我们将其称为Result范式，用函数式编程语境下的&lt;code&gt;Result Monad&lt;/code&gt;指代这类结构。&lt;/p&gt;
&lt;p&gt;抛开性能、C-兼容性等问题不谈，纯粹从软件系统设计的角度讲，&lt;code&gt;Result Monad&lt;/code&gt;也能更好地在API层面清晰无误地将可能出现的错误良好定义。而exception则散落在代码实现中，单看接口根本不知道throw了什么，隐藏了哪些坑，如何处理这些坑——这在软件互操作性上是灾难性的。&lt;/p&gt;
&lt;p&gt;如今Rust-like Result范式的&lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/expected&#34;&gt;std::expected&lt;/a&gt;已经进入标准库，自gcc12/clang16起已经可以使用了，受限于旧版编译器的场景则可以用第三方实现。&lt;/p&gt;
&lt;h1 id=&#34;keep-local-errors-in-their-own-types&#34;&gt;Keep Local Errors in Their Own Types&lt;/h1&gt;
&lt;p&gt;基于&lt;code&gt;Result&amp;lt;T,E&amp;gt;&lt;/code&gt;或&lt;code&gt;expected&amp;lt;T,E&amp;gt;&lt;/code&gt;进行错误处理时，有一个简单方便的做法是将E设置成一个巨大的全局enum，包含所有可能的error code。这样就可以在整个程序中自由地用&lt;code&gt;?&lt;/code&gt;操作符或&lt;code&gt;and_then/or_else&lt;/code&gt;传播error，达到类似&lt;code&gt;throw&lt;/code&gt;+&lt;code&gt;catch&lt;/code&gt;异常的效果。&lt;/p&gt;
&lt;p&gt;这么做的确可以降低编程时的心智负担，但同时也注入了滥用错误传播的风险——当编码者可以轻易甩锅时，往往就会甩锅。通常一个独立且内聚的模块会对自身内部细节有更多了解，有些问题还是就地处理更妥当，把失败的细节暴露给相对外行的调用者，是在鼓励制造不恰当的耦合。&lt;/p&gt;
&lt;p&gt;因此每个系统模块对外应暴露最小化的错误集，将内部可处理的错误在内部消化，并将所有&lt;code&gt;fatal error&lt;/code&gt;就地解决——往往是打日志、做些修复（有状态系统）、退出程序。为了避免滥用错误传播，对外暴露的这个错误集还应该有自己的enum类型（C++语境下一般就是&lt;code&gt;enum class&lt;/code&gt;，如有必要，可尝试用&lt;code&gt;std::variant&lt;/code&gt;+&lt;code&gt;std::visit&lt;/code&gt;模拟Rust的&lt;code&gt;Enums&lt;/code&gt; + &lt;code&gt;pattern matching&lt;/code&gt;，见&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;），而不宜采用全局统一的某种enum的subtype或variant——迫使直接调用者优先对错误进行处理而不是甩锅给间接调用者，在甩锅非常合理的场景下，必要的显式类型转换或&lt;code&gt;transform_error&lt;/code&gt;/&lt;code&gt;map_error&lt;/code&gt;，也让甩锅成为一个有意识的system2编程决策，而非system1本能行为。&lt;/p&gt;
&lt;p&gt;此外，有一些特殊错误的处理逻辑与众不同，不宜和其他错误共享一个enum class，而应赋予这单个error一个独占的类型。这种情况下，可以用嵌套的expected表示返回值类型，如&lt;code&gt;expectd&amp;lt;expected&amp;lt;T, SpecialError&amp;gt;, Error&amp;gt;&lt;/code&gt;，迫使调用者对SpecialError做单独处理。一个典型的例子是sled&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;中&lt;code&gt;compare_and_swap&lt;/code&gt;，返回类型特地包裹了两层，外层是sled::Error，内层是特殊的CompareAndSwapError（CAS失败并非异常，而是常态，对它的处理应视为控制流，而非异常处理），在做这种设计后，sled用户误用这个函数的几率就大大降低了，第一次用&lt;code&gt;?&lt;/code&gt;操作符仅将外层的通用Error传播了出去，不至于把必需特殊处理的CAS error也一并甩出去。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Rust&#34; data-lang=&#34;Rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compare_and_swap&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  key: &lt;span style=&#34;color:#a6e22e&#34;&gt;Key&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  old_value: &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  new_value: &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), CompareAndSwapError&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, sled::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// we can actually use try `?` now
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; cas_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sled.compare_and_swap(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dogs&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pickles&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catfood&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Err(cas_error) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cas_result {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// handle expected issue
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1095r0.pdf&#34;&gt;P1095R0: Zero overhead deterministic failure: A unified mechanism for C and C++&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0709r4.pdf&#34;&gt;P0709R4: Zero-overhead deterministic exceptions: Throwing values&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://thatonegamedev.com/cpp/rust-enums-in-modern-cpp-match-pattern/&#34;&gt;Rust enums in Modern C++ – Match Pattern&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://sled.rs/errors&#34;&gt;Error Handling in a Correctness-Critical Rust Project&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>On Transparency</title>
      <link>https://cmbbq.github.io/posts/on-transparency/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cmbbq.github.io/posts/on-transparency/</guid>
      <description>透明度是软件工程中长期被忽略的理想属性，是目前互联网行业技术管理体系中的薄弱环节。本文的透明度主要是指组件内部实现对研发团队的可见度、可解释性和可掌控程度，或者说白盒指数。
一个项目自上而下依赖的第三方黑盒越少，各个抽象层次上诸多组件对研发团队就越是透明的。高透明度意味着高度可维护，高度hackable，随时可拆卸，定位到任何抽象层次上存在性能瓶颈都能毫无桎梏地zoom in，然后修改、重构。习惯性地使用第三方依赖，哪怕这个依赖是得到广泛应用，甚至接近行业标准的高声望项目，依然会注入实现需求不完全匹配的风险。
高性能计算的一个重要启发式设计原则(heuristic)即特化(specialization)，特化显然包括软件特化——基于新的真实需求创造最直接贴合需求的新解决方案(direct solutions to the needs)，即造轮。
国内互联网同行们对造轮持过分谨慎态度，将其视为anti-pattern，遇到问题时立刻开始技术选型，对使用第三方依赖形成了不假思索的路径依赖。缺乏洞察问题的新颖性和独特性的敏锐度和饥渴，自然故步自封于技术选型，而无法做到真正的技术创新——计算系统的创新是根植于真实需求，对非结构化的现实需求施加结构，创造新的计算和存储形态。就以全文检索为例，美团外卖搜索用ES，微信聊天搜索用SQLite，都是没有选择自研高性能检索引擎，导致业务场景和经典解决方案出现错配，后期遇到了性能瓶颈后的所谓优化方案也只不过是对第三方库进行魔改，让它更贴合原本的需求罢了。比如lucene压根就不是in-memory索引，以至于外卖店家商品搜索这么小规模的场景都不能保证实时性。再说SQLite，默认当然不支持拆表+并行搜索，针对大库做简单的拆表和scatter-gather并行搜索提升性能其实是理所当然的解决方案。
如此视造轮为畏途实让人唏嘘，在性能上碰壁后，再钻进别人的故纸堆中修修补补，浪费的精力，产生额外的痛苦，远远超过当初用C++/Rust实现一个小而美的in-memory search index(例如pisa)。自研检索引擎用极少的代码量就可以击败lucene、sqlite、postgres，也可以很轻松地支持多线程实时索引更新，而不必牺牲索引性能，还可以针对现代物理机进行深度cache优化、减少核间通信和远端内存访问，将现代硬件的性能在检索这种访存密集应用上发挥到极致。</description>
      <content>&lt;p&gt;透明度是软件工程中长期被忽略的理想属性，是目前互联网行业技术管理体系中的薄弱环节。本文的透明度主要是指组件内部实现对研发团队的可见度、可解释性和可掌控程度，或者说&lt;a href=&#34;https://en.wikipedia.org/wiki/White_box_(software_engineering)&#34;&gt;白盒&lt;/a&gt;指数。&lt;/p&gt;
&lt;p&gt;一个项目自上而下依赖的第三方黑盒越少，各个抽象层次上诸多组件对研发团队就越是透明的。高透明度意味着高度可维护，高度hackable，随时可拆卸，定位到任何抽象层次上存在性能瓶颈都能毫无桎梏地zoom in，然后修改、重构。习惯性地使用第三方依赖，哪怕这个依赖是得到广泛应用，甚至接近行业标准的高声望项目，依然会注入实现需求不完全匹配的风险。&lt;/p&gt;
&lt;p&gt;高性能计算的一个重要启发式设计原则(heuristic)即特化(specialization)，特化显然包括软件特化——基于新的真实需求创造最直接贴合需求的新解决方案(direct solutions to the needs)，即造轮。&lt;/p&gt;
&lt;p&gt;国内互联网同行们对造轮持过分谨慎态度，将其视为anti-pattern，遇到问题时立刻开始技术选型，对使用第三方依赖形成了不假思索的路径依赖。缺乏洞察问题的新颖性和独特性的敏锐度和饥渴，自然故步自封于技术选型，而无法做到真正的技术创新——计算系统的创新是根植于真实需求，对非结构化的现实需求施加结构，创造新的计算和存储形态。就以全文检索为例，&lt;a href=&#34;https://tech.meituan.com/2022/11/17/elasicsearch-optimization-practice-based-on-run-length-encoding.html&#34;&gt;美团外卖搜索用ES&lt;/a&gt;，&lt;a href=&#34;https://zhuanlan.zhihu.com/p/608082104&#34;&gt;微信聊天搜索用SQLite&lt;/a&gt;，都是没有选择自研高性能检索引擎，导致业务场景和经典解决方案出现错配，后期遇到了性能瓶颈后的所谓优化方案也只不过是对第三方库进行魔改，让它更贴合原本的需求罢了。比如lucene压根就不是in-memory索引，以至于外卖店家商品搜索这么小规模的场景都不能保证实时性。再说SQLite，默认当然不支持拆表+并行搜索，针对大库做简单的拆表和scatter-gather并行搜索提升性能其实是理所当然的解决方案。&lt;/p&gt;
&lt;p&gt;如此视造轮为畏途实让人唏嘘，在性能上碰壁后，再钻进别人的故纸堆中修修补补，浪费的精力，产生额外的痛苦，远远超过当初用C++/Rust实现一个小而美的in-memory search index(例如&lt;a href=&#34;https://github.com/pisa-engine/pisa&#34;&gt;pisa&lt;/a&gt;)。自研检索引擎用极少的代码量就可以击败lucene、sqlite、postgres，也可以很轻松地支持多线程实时索引更新，而不必牺牲索引性能，还可以针对现代物理机进行深度cache优化、减少核间通信和远端内存访问，将现代硬件的性能在检索这种访存密集应用上发挥到极致。&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
